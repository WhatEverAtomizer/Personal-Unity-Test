//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""PlaneControls"",
            ""id"": ""20eaeef6-9645-462d-86f3-91c26de40d02"",
            ""actions"": [
                {
                    ""name"": ""Roll"",
                    ""type"": ""Value"",
                    ""id"": ""1435d859-4421-4e66-b334-a8d6d1755690"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pitch"",
                    ""type"": ""Value"",
                    ""id"": ""6a79dda6-7d95-4735-a1f7-6e9efc4902ee"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Yaw"",
                    ""type"": ""Value"",
                    ""id"": ""d0a8b769-6df4-448d-9c38-80f8a75f2474"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ThrottleUp"",
                    ""type"": ""Value"",
                    ""id"": ""846af34e-dded-4c3a-91a6-1ca6175449b0"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ThrottleDown"",
                    ""type"": ""Value"",
                    ""id"": ""c0994c6a-3730-43a0-94f6-f981a4082ac7"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Roll"",
                    ""id"": ""e52cb588-c68d-4f29-b6fd-0512195faa19"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""a9074bdb-3024-4cf6-9077-c3432167ebe6"",
                    ""path"": ""<Keyboard>/numpad4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""178ebe7d-8945-4c71-ae94-2eab3691dead"",
                    ""path"": ""<Keyboard>/numpad6"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Pitch"",
                    ""id"": ""48d1ba1a-e969-4016-bdba-37129338ab20"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pitch"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""c360b613-41de-42d4-b892-26616b252b48"",
                    ""path"": ""<Keyboard>/numpad5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pitch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""f5d8d45c-a1af-4b75-96fe-1b9e1b68c391"",
                    ""path"": ""<Keyboard>/numpad8"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pitch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Yaw"",
                    ""id"": ""cae97d18-45b2-4b88-9e18-e2224ad36c4b"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Yaw"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""1a4408ad-df7c-40a8-b231-c62ef2ec2c6f"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Yaw"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""18b5c3a0-792e-4bc2-baf0-e4d2f8c25d7d"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Yaw"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""0b812dad-4023-425e-b694-5a5f3b181000"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ThrottleUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""73094803-d04e-4775-8349-2d821500a7e7"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ThrottleDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlaneControls
        m_PlaneControls = asset.FindActionMap("PlaneControls", throwIfNotFound: true);
        m_PlaneControls_Roll = m_PlaneControls.FindAction("Roll", throwIfNotFound: true);
        m_PlaneControls_Pitch = m_PlaneControls.FindAction("Pitch", throwIfNotFound: true);
        m_PlaneControls_Yaw = m_PlaneControls.FindAction("Yaw", throwIfNotFound: true);
        m_PlaneControls_ThrottleUp = m_PlaneControls.FindAction("ThrottleUp", throwIfNotFound: true);
        m_PlaneControls_ThrottleDown = m_PlaneControls.FindAction("ThrottleDown", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlaneControls
    private readonly InputActionMap m_PlaneControls;
    private List<IPlaneControlsActions> m_PlaneControlsActionsCallbackInterfaces = new List<IPlaneControlsActions>();
    private readonly InputAction m_PlaneControls_Roll;
    private readonly InputAction m_PlaneControls_Pitch;
    private readonly InputAction m_PlaneControls_Yaw;
    private readonly InputAction m_PlaneControls_ThrottleUp;
    private readonly InputAction m_PlaneControls_ThrottleDown;
    public struct PlaneControlsActions
    {
        private @Controls m_Wrapper;
        public PlaneControlsActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Roll => m_Wrapper.m_PlaneControls_Roll;
        public InputAction @Pitch => m_Wrapper.m_PlaneControls_Pitch;
        public InputAction @Yaw => m_Wrapper.m_PlaneControls_Yaw;
        public InputAction @ThrottleUp => m_Wrapper.m_PlaneControls_ThrottleUp;
        public InputAction @ThrottleDown => m_Wrapper.m_PlaneControls_ThrottleDown;
        public InputActionMap Get() { return m_Wrapper.m_PlaneControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlaneControlsActions set) { return set.Get(); }
        public void AddCallbacks(IPlaneControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_PlaneControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlaneControlsActionsCallbackInterfaces.Add(instance);
            @Roll.started += instance.OnRoll;
            @Roll.performed += instance.OnRoll;
            @Roll.canceled += instance.OnRoll;
            @Pitch.started += instance.OnPitch;
            @Pitch.performed += instance.OnPitch;
            @Pitch.canceled += instance.OnPitch;
            @Yaw.started += instance.OnYaw;
            @Yaw.performed += instance.OnYaw;
            @Yaw.canceled += instance.OnYaw;
            @ThrottleUp.started += instance.OnThrottleUp;
            @ThrottleUp.performed += instance.OnThrottleUp;
            @ThrottleUp.canceled += instance.OnThrottleUp;
            @ThrottleDown.started += instance.OnThrottleDown;
            @ThrottleDown.performed += instance.OnThrottleDown;
            @ThrottleDown.canceled += instance.OnThrottleDown;
        }

        private void UnregisterCallbacks(IPlaneControlsActions instance)
        {
            @Roll.started -= instance.OnRoll;
            @Roll.performed -= instance.OnRoll;
            @Roll.canceled -= instance.OnRoll;
            @Pitch.started -= instance.OnPitch;
            @Pitch.performed -= instance.OnPitch;
            @Pitch.canceled -= instance.OnPitch;
            @Yaw.started -= instance.OnYaw;
            @Yaw.performed -= instance.OnYaw;
            @Yaw.canceled -= instance.OnYaw;
            @ThrottleUp.started -= instance.OnThrottleUp;
            @ThrottleUp.performed -= instance.OnThrottleUp;
            @ThrottleUp.canceled -= instance.OnThrottleUp;
            @ThrottleDown.started -= instance.OnThrottleDown;
            @ThrottleDown.performed -= instance.OnThrottleDown;
            @ThrottleDown.canceled -= instance.OnThrottleDown;
        }

        public void RemoveCallbacks(IPlaneControlsActions instance)
        {
            if (m_Wrapper.m_PlaneControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlaneControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_PlaneControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlaneControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlaneControlsActions @PlaneControls => new PlaneControlsActions(this);
    public interface IPlaneControlsActions
    {
        void OnRoll(InputAction.CallbackContext context);
        void OnPitch(InputAction.CallbackContext context);
        void OnYaw(InputAction.CallbackContext context);
        void OnThrottleUp(InputAction.CallbackContext context);
        void OnThrottleDown(InputAction.CallbackContext context);
    }
}
